
class Solution {
    public int totalFruit(int[] fruits) {
        if(fruits.length==1 && fruits[0]==0)
            return 1;
        Set<Integer> set=new HashSet<>();
        for(int i=0;i<fruits.length;i++)
        {
            set.add(fruits[i]);
        }
        if(set.size()<=2)
        {
            return fruits.length;
        }
        
        Map<Integer,Integer> map=new HashMap<>();
        
      int i=-1;
        int j=-1;
        int ans=-1;
        int n=fruits.length-1;
        
        while(true)
        {
            boolean f1=false;
            boolean f2=false;
            while(i<n)
            {
                f1=true;
                i++;
                map.put(fruits[i],map.getOrDefault(fruits[i],0)+1);
                
                if(map.size()<2)
                    continue;
                else if(map.size()==2)
                {
                  int len=i-j;
                 if(ans<len)
                        ans=len;

                    
                }
                else
                    break;
            
            }
            while(j<i)
            {
                f2=true;
                j++;
                if(map.get(fruits[j])==1)
                    map.remove(fruits[j]);
                else
                    map.put(fruits[j],map.get(fruits[j])-1);
                
                 if(map.size()>2)
                    continue;
                else if(map.size()==2)
                {
                    int len=i-j;

                    if(ans<len)
                        ans=len;
                    else
                        break;
                    
                    
                }

                
                
            }
            if(f1==false && f2==false)
                break;
        }
        return ans;
        
        
        
    }
}
